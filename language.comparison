================================================================================
250108 水
String concatenation
1. Common Lisp
  (concatenate 'string "foo" "bar") ; Strings only
  (format nil "~D ~A" 8 "monkeys")
2. Oz
  {Append "foo" "bar"}
3. Smalltalk

4. Io
  5 .. " golden rings"
5. Java
  3 + " apples" // toString()
6. JavaScript
  9 + " pungs"
7. Ruby
  8.to_s + " monkeys"
8. Python
  str(8) + " monkeys"
9. C++

10. Dylan
11. Lua
   "foo" .. "bar"
================================================================================
250113 月
Number -> String
String -> Number
1. Common Lisp
  (write-to-string x)
  (format nil "~D" 8)
  (parse-integer "8")
  (read-from-string "9.2")
2. Oz
   StringToInt
   StringToFloat
   IntToString
   FloatToString
3. Smalltalk

4. Io
   asNumber
5. Java
   Double.parseDouble(s)
   Double.toString(x)
6. JavaScript
   Number(s) [new Number(s)]
   n.toString()
   .toExponential()
   .toFixed()
   .toPrecision()
7. Ruby
   Integer()
   Float()
   .to_i
   .to_f
   .to_s
8. Python
   str(8)
   int('88') => 88
   float('88.2') => 88.2
   float(88) => 88.0
   int(2.3) => 2  
9. C++
https://www.geeksforgeeks.org/convert-string-to-int-in-cpp/
   stoi()
   atoi()
   sscanf()
..
   stod()

10. Dylan
    string-to-integer("88")
    [string-to-float()] ??????
    integer-to-string()
    float-to-string()
11. Lua
    tostring(x)
    tonumber(s[, b])
================================================================================
250114 火
Integer arithmetic operators
1. Common Lisp (Arbitrary precision)
   +-
   + - * / (rational)
   truncate floor mod rem expt
2. Oz (Arbitrary precision)
    ~
   + - * div (truncate)
   mod [rem] Pow
3. Smalltalk (Arbitrary precision)
    -
   + - * / (rational)
   % [mod] **
4. Io
    -
   + - * / (float)
   % [rem] **
5. Java
   +-
   + - * / (truncate)
   % [rem] BigInteger#pow()
6. JavaScript
   +-
   + - * / (float)
   % [rem] **
7. Ruby (Arbitrary precision)
   +-
   + - * / (floor)
   % [mod] **
8. Python (Arbitrary precision)
   +-
   + - * // (floor)
   % [mod] **
9. C++
   +-
   + - * / (truncate)
   % [rem] pow() <cmath>
10. Dylan
   - negative
   + - * truncate/ ^
   truncate truncate/ floor floor/ modulo remainder
11. Lua
   -
   + - * /
   % [mod] math.fmod(m, n) [rem] ^
   math.floor math.ceil math.modf(m, n) [truncate]
================================================================================
250116 木
Floating-point arithmetic operators
1. Common Lisp (single-float, double-float)
   +-
   + - * /
   truncate floor mod rem expt
2. Oz (double)
    ~
   + - * /
   mod [rem] ??? Pow
3. Smalltalk 
    -
   + - * /
   % [mod] **
4. Io (double)
    -
   + - * /
   % [rem] **
5. Java (float, double)
   +-
   + - * /
   % [rem] Math.pow()
6. JavaScript (double)
   +-
   + - * /
   % [rem] **
7. Ruby (double)
   +-
   + - * /
   % [mod] **
8. Python (double)
   +-
   + - * /
   % [mod] **
9. C++ (float, double)
   +-
   + - * /
   fmod() [rem] pow() <cmath>
10. Dylan (single-float, double-float)
    negative
   + - * /
   truncate truncate/ floor floor/ modulo remainder
11. Lua
   -
   + - * /
   % [mod] math.fmod(m, n) [rem] ^
   math.floor math.ceil math.modf(m, n) [truncate]
================================================================================
250130 木
Booleans
1. Common Lisp
   boolean t (all non-NIL values), nil
   and or not
2. Oz
   true, false
   And Or Not
   andthen orelse
3. Smalltalk 
4. Io
   and or not
5. Java
   boolean true, false Boolean
   && || !
6. JavaScript
   boolean true, false
   && || !
7. Ruby true, false
   && || !
   and or
8. Python
   bool True, False
   and or not
9. C++
10. Dylan
   #t (all non-false values), #f
   & | ~
11. Lua
    true false
    and or not
================================================================================
250130 木
Comparison operators
1. Common Lisp
   = /= < <= > >=
2. Oz
   == \= < =< > >=
3. Smalltalk 

4. Io (compare())
   == != < <= > >=
5. Java
   == != < <= > >=
6. JavaScript
   == != < <= > >=
7. Ruby true, false
   == != < <= > >=
8. Python
   == != < <= > >=
9. C++
   == != < <= > >=
10. Dylan
   = ~= < <= > >=
11. Lua
   == ~= < <= > >=
================================================================================
250130 木
Sample math functions
1. Common Lisp
   abs, max, min
   sin, cos, tan, atan, (abs (complex x y)), exp, expt, ln, log, sqrt, sinh, cosh, ...
   random
2. Oz

3. Smalltalk 

4. Io
5. Java
   Math.abs, max, min
   Math.sin, cos, tan, atan2, hypot, toRadians, toDegrees, exp, log, log10, sqrt, pow, sinh, cosh, ...
6. JavaScript
7. Ruby true, false
8. Python
   abs, max, min
   math.sin, cos, tan, atan2, hypot, radians, degrees, exp, log(x, b), sqrt, erf, gamma
   random.random, randrange
9. C++
10. Dylan
11. Lua
    math.abs, math.max, math.min
    math.sin, ...
    math.sqrt, math.log(x[, b])
================================================================================
250131 金
Character type?
1. Common Lisp
   #\a
2. Oz
   &a
3. Smalltalk 

4. Io
5. Java
   'a' (Broken Unicode)
6. JavaScript
7. Ruby
8. Python
9. C++
   'a'
10. Dylan
    'a'
11. Lua
